AWSTemplateFormatVersion: '2010-09-09'
Description: Image Processing App with S3, Lambda, API Gateway, CORS, and Binary Media Types

Resources:

  # Buckets
  OriginalImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: naveen-original-uploaded-images-vpikkili

  ProcessedImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: naveen-processed-images-vpikkili

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: image-processing-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessAndLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::naveen-original-uploaded-images-vpikkili/*
                  - arn:aws:s3:::naveen-processed-images-vpikkili/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function
  ImageProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: image-processing-function-vpikkili
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      MemorySize: 512
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Placeholder Lambda deployed via pipeline"}

      Environment:
        Variables:
          SOURCE_BUCKET_NAME: naveen-original-uploaded-images-vpikkili
          PROCESSED_BUCKET_NAME: naveen-processed-images-vpikkili

  # REST API Gateway
  ImageApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ImageProcessingAPI
      BinaryMediaTypes:
        - image/jpeg
        - image/png
        - image/jpg

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ImageApi
      ParentId: !GetAtt ImageApi.RootResourceId
      PathPart: upload

  # POST Method - Image Upload
  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageApi
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImageProcessingLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # CORS - OPTIONS Method
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageApi
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            # Removed ResponseTemplates here to prevent drift
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref ImageApi
      StageName: prod

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageProcessingLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ImageApi}/*/POST/upload

Outputs:
  APIInvokeURL:
    Description: "POST image to this endpoint"
    Value: !Sub https://${ImageApi}.execute-api.${AWS::Region}.amazonaws.com/prod/upload
