AWSTemplateFormatVersion: '2010-09-09'
Description: Secure Image Processing App with S3, Lambda, API Gateway, CORS, Versioning, Throttling, and API Key

Resources:

  # S3 Buckets
  OriginalImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: naveen-original-uploaded-images-vpikkili

  ProcessedImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: naveen-processed-images-vpikkili

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: image-processing-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessAndLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::naveen-original-uploaded-images-vpikkili/*
                  - arn:aws:s3:::naveen-processed-images-vpikkili/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function (Basic Placeholder)
  ImageProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: image-processing-function-vpikkili
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      MemorySize: 512
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Placeholder Lambda deployed via pipeline"}
      Environment:
        Variables:
          SOURCE_BUCKET_NAME: naveen-original-uploaded-images-vpikkili
          PROCESSED_BUCKET_NAME: naveen-processed-images-vpikkili

  # API Gateway
  ImageApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ImageProcessingAPI
      BinaryMediaTypes:
        - image/jpeg
        - image/png
        - image/jpg
        - multipart/form-data

  ApiVersionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ImageApi
      ParentId: !GetAtt ImageApi.RootResourceId
      PathPart: v1

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ImageApi
      ParentId: !Ref ApiVersionResource
      PathPart: upload

  # POST Method with CORS headers in integration response
  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageApi
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImageProcessingLambda.Arn}/invocations
        ContentHandling: CONVERT_TO_BINARY
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS preflight
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageApi
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Deployment and Stage
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref ImageApi
      Description: Initial deployment

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref ImageApi
      DeploymentId: !Ref ApiDeployment

  # Lambda Permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ImageProcessingLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ImageApi}/prod/POST/v1/upload

  # Optional: API Key and Usage Plan
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: ImageUploadApiKey
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ImageApi
          StageName: !Ref ApiStage

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: ImageProcessingUsagePlan
      ApiStages:
        - ApiId: !Ref ImageApi
          Stage: !Ref ApiStage
      Throttle:
        RateLimit: 10
        BurstLimit: 20
      Quota:
        Limit: 1000
        Period: DAY

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

Outputs:
  APIInvokeURL:
    Description: "POST image to this endpoint"
    Value: !Sub "https://${ImageApi}.execute-api.${AWS::Region}.amazonaws.com/prod/v1/upload"

  ApiKeyValue:
    Description: "Your API Key for client-side calls"
    Value: !Ref ApiKey
